version: 2.1

orbs:
  rok8s: fairwinds/rok8s-scripts@11

executors:
  vm:
    machine:
      enabled: true

references:
  set_environment_variables: &set_environment_variables
    run:
      name: Set Environment Variables
      command: |
        echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
        echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
        echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
        echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
        echo 'export PUSH_ALL_VERSION_TAGS=true' >> ${BASH_ENV}
        echo 'export GOPROXY=https://proxy.golang.org' >> ${BASH_ENV}
        echo 'export GO111MODULE=on' >> ${BASH_ENV}
        echo 'export GOFLAGS=-mod=mod' >> ${BASH_ENV}
        echo 'export GORELEASER_CURRENT_TAG="${CIRCLE_TAG}"' >> $BASH_ENV

  install_k8s: &install_k8s
    run:
      name: Install K8s
      command: |
        sudo apt-get update
        echo "Installing git and jq"
        sudo apt-get install -yqq jq git

        echo "Installing KIND"
        curl -sLO https://github.com/kubernetes-sigs/kind/releases/download/v0.14.0/kind-linux-amd64
        chmod 0755 kind-linux-amd64
        sudo mv kind-linux-amd64 /usr/local/bin/kind
        kind version

        echo "Installing Kubectl"
        curl -sLO https://storage.googleapis.com/kubernetes-release/release/v1.21.12/bin/linux/amd64/kubectl
        chmod 0755 kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client


        echo "Creating Kubernetes Cluster with Kind"
        kind create cluster --wait=90s --image kindest/node:v1.21.12
        docker ps -a

        kubectl version

        echo "Installing Helm"
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

        echo "Installing cert-manager"
        kubectl create namespace cert-manager
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
        echo "Helm install"
        helm install cert-manager jetstack/cert-manager --namespace cert-manager --version 0.16.1 --set "installCRDs=true" --wait
        echo "Install cert-manager successful"

  test_binary_dashboard: &test_binary_dashboard
    run:
      name: Test Dashboard
      command: |
        go run main.go dashboard --port 3000 --audit-path ./examples &
        sleep 30
        curl -f http://localhost:3000 > /dev/null
        curl -f http://localhost:3000/health > /dev/null
        curl -f http://localhost:3000/favicon.ico > /dev/null
        curl -f http://localhost:3000/static/css/main.css > /dev/null
        curl -f http://localhost:3000/results.json > /dev/null
        curl -f http://localhost:3000/details/security > /dev/null
  test_k8s: &test_k8s
    run:
      name: Test Kubernetes Deployments
      command: |
        if [[ -z $CIRCLE_PR_NUMBER ]]; then
          ./test/webhook_test.sh
          ./test/kube_dashboard_test.sh
        else
          echo "Skipping Kubernetes tests for forked PR"
        fi

  docker_build: &docker_build
    run:
      name: Docker login and build
      command: |
        docker-pull -f .circleci/build.config
        docker-build -f .circleci/build.config

  docker_build_and_push: &docker_build_and_push
    run:
      name: Docker login, build, and push
      command: |
        docker-pull -f .circleci/build.config
        docker-build -f .circleci/build.config
        docker login quay.io -u="${fairwinds_quay_user}" -p="${fairwinds_quay_token}"
        docker-push -f .circleci/build.config

  enable_experimental_features: &enable_experimental_docker_features
    run:
      name: enable experimental features
      command: |
        set -ex
        apk --update add openssh
        ssh remote-docker \<<EOF
          sudo bash -c 'echo "{\"experimental\": true}" > /etc/docker/daemon.json'
          sudo systemctl restart docker
        EOF
  install_vault_alpine: &install_vault_alpine
    run:
      name: install hashicorp vault
      command: |
        apk --update add curl yq
        cd /tmp
        curl -LO https://releases.hashicorp.com/vault/1.9.3/vault_1.9.3_linux_amd64.zip
        unzip vault_1.9.3_linux_amd64.zip
        mv vault /usr/bin/vault

jobs:
  build:
    docker:
      - image: quay.io/reactiveops/ci-images:v11.0-stretch
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *docker_build

  push:
    docker:
      - image: quay.io/reactiveops/ci-images:v11.0-stretch
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *docker_build_and_push

  test_k8s:
    working_directory: ~/polaris
    resource_class: medium
    executor: vm
    steps:
      - checkout
      - *install_k8s
      - *test_k8s

  test:
    working_directory: /go/src/github.com/fairwindsops/polaris/
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - *set_environment_variables
      - run: go get -u golang.org/x/lint/golint
      - run: go list ./... | grep -v vendor | xargs golint -set_exit_status
      - run: go list ./... | grep -v vendor | xargs go vet
      - run: go test ./... -coverprofile=coverage.txt -covermode=count
      - *test_binary_dashboard

  insights:
    docker:
      - image: quay.io/reactiveops/ci-images:v11.0-stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Insights CI
          command: curl -L https://insights.fairwinds.com/v0/insights-ci.sh | bash

  release_binary:
    working_directory: /go/src/github.com/fairwindsops/polaris/
    resource_class: large
    shell: /bin/bash
    docker:
      - image: goreleaser/goreleaser:v1.3.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
      - *enable_experimental_docker_features
      - *install_vault_alpine
      - rok8s/get_vault_env:
          vault_path: repo/global/env
      - rok8s/get_vault_env:
          vault_path: repo/polaris/env
      - *set_environment_variables
      - run: go get -u github.com/gobuffalo/packr/v2/packr2
      - run: git checkout -- . # FIXME: the go get makes the directory dirty
      - run: packr2
      - run: echo 'export GORELEASER_CURRENT_TAG="${CIRCLE_TAG}"' >> $BASH_ENV
      - run: goreleaser

  release_images:
    working_directory: /go/src/github.com/fairwindsops/polaris/
    docker:
      - image: quay.io/reactiveops/ci-images:v11.0-stretch
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *docker_build_and_push
  publish_docs:
    docker:
      - image: cimg/node:15.5.1
    steps:
      - checkout
      - run:
          name: Build Docs Site
          command: |
            set -e
            cd ./docs
            npm install
            npm run check-links
            npm run build
      - run:
          name: Install Tools
          command: |
            cd /tmp
            echo "Installing AWS CLI"
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            echo "Installing Hashicorp Vault"
            curl -LO https://releases.hashicorp.com/vault/1.9.3/vault_1.9.3_linux_amd64.zip
            unzip vault_1.9.3_linux_amd64.zip
            sudo mv vault /usr/bin/vault
            sudo chmod +x /usr/bin/vault
            vault --version

            echo "Installing yq"
            curl -LO https://github.com/mikefarah/yq/releases/download/v4.16.2/yq_linux_amd64.tar.gz
            tar -zxvf yq_linux_amd64.tar.gz
            sudo mv yq_linux_amd64 /usr/bin/yq
            sudo chmod +x /usr/bin/yq
            yq --version
      - rok8s/get_vault_env:
          vault_path: repo/polaris/env
      - run:
          name: Publish Docs Site to S3
          command: |
            cd ./dist
            aws s3 sync ./ s3://polaris.docs.fairwinds.com --delete
workflows:
  version: 2

  build:
    jobs:
      - test
      - build:
          requires:
            - test
      - push:
          context: org-global
          requires:
            - build
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - insights:
          requires:
            - push
          filters:
            branches:
              ignore: /pull\/[0-9]+/
      - test_k8s:
          requires:
            - push
          filters:
            branches:
              ignore: /pull\/[0-9]+/

  release:
    jobs:
      - release_binary:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: /^testing-.*/
      - release_images:
          requires:
            - release_binary
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: /^testing-.*/
      - publish_docs:
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: /^testing-.*/
