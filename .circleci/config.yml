version: 2

references:
  install_goreleaser: &install_goreleaser
    run:
      name: Install GoReleaser
      command: |
        curl -fsSLo goreleaser.deb https://github.com/goreleaser/goreleaser/releases/download/v0.94.0/goreleaser_amd64.deb
        echo "8dbad6683d6fc9367e637e6eed8e01a0d63c9660  goreleaser.deb" | sha1sum -c
        sudo dpkg -i goreleaser.deb
        rm goreleaser.deb
  set_environment_variables: &set_environment_variables
    run:
      name: Set Environment Variables
      command: |
        echo 'export REPO=quay.io/reactiveops/polaris' >> ${BASH_ENV}
  docker_build_and_push: &docker_build_and_push
    run:
      name: Docker login, build, and push
      command: |
        docker build -t $REPO:dev-$CIRCLE_SHA1 .
        if [[ -z $CIRCLE_PR_NUMBER ]]; then
          docker login quay.io -u="reactiveops+circleci" -p="${quay_token}"
          docker push $REPO:dev-$CIRCLE_SHA1
        else
          echo "Skipping docker push for forked PR"
        fi
  docker_tag_release: &docker_tag_release
    run:
      name: Docker tag release
      command: |
        docker login quay.io -u="reactiveops+circleci" -p="${quay_token}"
        docker build -t $REPO:dev-$CIRCLE_SHA1 .
        docker tag $REPO:dev-$CIRCLE_SHA1 $REPO:$CIRCLE_TAG
        docker push $REPO:$CIRCLE_TAG
  update_coverage: &update_coverage
    run:
      name: Update Coverage
      command: |
        if [[ -z $CIRCLE_PR_NUMBER ]]; then
          go test ./pkg/... -coverprofile=coverage.txt -covermode=count
          bash <(curl -s https://codecov.io/bash)
        else
          echo "Skipping coverage for forked PR"
        fi

  test_dashboard: &test_dashboard
    run:
      name: Test Dashboard
      command: |
        go run main.go --dashboard --dashboard-port 3000 --audit-path ./deploy/dashboard.yaml &
        sleep 5
        curl -f http://localhost:3000 > /dev/null
        curl -f http://localhost:3000/health > /dev/null
        curl -f http://localhost:3000/favicon.ico > /dev/null
        curl -f http://localhost:3000/static/css/main.css > /dev/null
        curl -f http://localhost:3000/results.json > /dev/null
        curl -f http://localhost:3000/details/security > /dev/null

jobs:
  build:
    docker:
      - image: quay.io/reactiveops/ci-images:v8.0-stretch
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *docker_build_and_push

  test:
    working_directory: /go/src/github.com/reactiveops/polaris/
    docker:
      - image: circleci/golang:1.12

    steps:
      - checkout
      - run: go get -u golang.org/x/lint/golint
      - run: go list ./... | grep -v vendor | xargs golint -set_exit_status
      - run: go list ./... | grep -v vendor | xargs go vet
      - *update_coverage
      - *test_dashboard

  test-deploy:
    docker:
      - image: quay.io/reactiveops/ci-images:v8.0-stretch
    steps:
      - checkout
      - run:
          name: Verify helm chart synced with dashboard.yaml
          command: |
            diff \
              <(helm template deploy/helm/polaris/ --name polaris --namespace polaris --set templateOnly=true) \
              deploy/dashboard.yaml || (echo "
                Make sure to regenerate k8s deploy config with make helm-to-k8s" &&
                exit 1)

      - run:
          name: Verify helm chart synced with webhook.yaml
          command: |
            diff \
              <(helm template deploy/helm/polaris/ --name polaris --namespace polaris --set templateOnly=true --set webhook.enable=true --set dashboard.enable=false) \
              deploy/webhook.yaml || (echo "
                Make sure to regenerate k8s deploy config with make helm-to-k8s" &&
                exit 1)

  release:
    working_directory: /go/src/github.com/reactiveops/polaris/
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *docker_tag_release
      - *install_goreleaser
      - run: go get -u github.com/gobuffalo/packr/v2/packr2
      - run: packr2
      - run: goreleaser

workflows:
  version: 2
  build:
    jobs:
      - test
      - test-deploy
      - build:
          requires:
            - test
            - test-deploy
          context: org-global
          # Allow using testing tags for testing circle test + build steps
          filters:
            tags:
              only: /^testing-.*/
  release:
    jobs:
      - release:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            # Testing tags are reserved for testing circle test + build steps
            tags:
              ignore: /^testing-.*/
