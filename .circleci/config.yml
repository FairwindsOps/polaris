version: 2

references:
  set_environment_variables: &set_environment_variables
    run:
      name: Set Environment Variables
      command: |
        echo 'export CI_SHA1=$CIRCLE_SHA1' >> ${BASH_ENV}
        echo 'export CI_BRANCH=$CIRCLE_BRANCH' >> ${BASH_ENV}
        echo 'export CI_BUILD_NUM=$CIRCLE_BUILD_NUM' >> ${BASH_ENV}
        echo 'export CI_TAG=$CIRCLE_TAG' >> ${BASH_ENV}
        echo 'export PUSH_ALL_VERSION_TAGS=true' >> ${BASH_ENV}
  docker_build_and_push: &docker_build_and_push
    run:
      name: Docker login, build, and push
      command: |
        docker-pull -f .circleci/build.config
        docker-build -f .circleci/build.config
        if [[ -n $CIRCLE_TAG ]]; then
          export ADDITIONAL_DOCKER_TAG_VERSIONS=(`echo $CIRCLE_TAG | sed -e 's/\(\w\+\)\..*$/\1/'`)
        fi
        if [[ -z $CIRCLE_PR_NUMBER ]]; then
          docker login quay.io -u="reactiveops+circleci" -p="${quay_token}"
          docker-push -f .circleci/build.config
        else
          echo "Skipping docker push for forked PR"
        fi

  # Test scripts
  update_coverage: &update_coverage
    run:
      name: Update Coverage
      command: |
        if [[ -z $CIRCLE_PR_NUMBER ]]; then
          go test ./pkg/... -coverprofile=coverage.txt -covermode=count
          bash <(curl -s https://codecov.io/bash)
        else
          echo "Skipping coverage for forked PR"
        fi
  test_dashboard: &test_dashboard
    run:
      name: Test Dashboard
      command: |
        go run main.go --dashboard --dashboard-port 3000 --audit-path ./examples &
        sleep 5
        curl -f http://localhost:3000 > /dev/null
        curl -f http://localhost:3000/health > /dev/null
        curl -f http://localhost:3000/favicon.ico > /dev/null
        curl -f http://localhost:3000/static/css/main.css > /dev/null
        curl -f http://localhost:3000/results.json > /dev/null
        curl -f http://localhost:3000/details/security > /dev/null

  # Release scripts
  install_goreleaser: &install_goreleaser
    run:
      name: Install GoReleaser
      command: |
        curl -fsSLo goreleaser.deb https://github.com/goreleaser/goreleaser/releases/download/v0.94.0/goreleaser_amd64.deb
        echo "8dbad6683d6fc9367e637e6eed8e01a0d63c9660  goreleaser.deb" | sha1sum -c
        sudo dpkg -i goreleaser.deb
        rm goreleaser.deb
  release_deploy_configs: &release_deploy_configs
    run:
      name: Release deploy configs
      command: |
        git clone --branch polaris-latest https://github.com/reactiveops/charts
        mkdir deploy
        helm template ./charts/stable/polaris --name polaris --namespace polaris --set templateOnly=true > deploy/dashboard.yaml
        helm template ./charts/stable/polaris --name polaris --namespace polaris --set templateOnly=true --set webhook.enable=true --set dashboard.enable=false > deploy/webhook.yaml
        upload_url=$(curl --silent https://api.github.com/repos/reactiveops/polaris/releases/latest | grep upload_url)
        upload_url=$(echo $upload_url | sed -e 's/.*\(https.*\){.*$/\1/')
        curl -X POST "$upload_url?name=dashboard.yaml" --data-binary "@./deploy/dashboard.yaml" -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/x-yaml"
        curl -X POST "$upload_url?name=webhook.yaml" --data-binary "@./deploy/webhook.yaml" -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/x-yaml"
        rm -rf ./charts
        rm -rf ./deploy

jobs:
  build:
    docker:
      - image: quay.io/reactiveops/ci-images:v8.0-stretch
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *docker_build_and_push

  test:
    working_directory: /go/src/github.com/reactiveops/polaris/
    docker:
      - image: circleci/golang:1.12

    steps:
      - checkout
      - run: go get -u golang.org/x/lint/golint
      - run: go list ./... | grep -v vendor | xargs golint -set_exit_status
      - run: go list ./... | grep -v vendor | xargs go vet
      - *update_coverage
      - *test_dashboard

  release_binary:
    working_directory: /go/src/github.com/reactiveops/polaris/
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *install_goreleaser
      - run: go get -u github.com/gobuffalo/packr/v2/packr2
      - run: packr2
      - run: goreleaser

  release_images:
    working_directory: /go/src/github.com/reactiveops/polaris/
    docker:
      - image: quay.io/reactiveops/ci-images:v8.0-stretch
    steps:
      - checkout
      - setup_remote_docker
      - *set_environment_variables
      - *docker_build_and_push
      - *release_deploy_configs

workflows:
  version: 2
  build:
    jobs:
      - test
      - build:
          requires:
            - test
          context: org-global
          # Allow using testing tags for testing circle test + build steps
          filters:
            tags:
              only: /^testing-.*/
  release:
    jobs:
      - release_binary:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            # Testing tags are reserved for testing circle test + build steps
            tags:
              ignore: /^testing-.*/
      - release_images:
          requires:
            - release_binary
          context: org-global
          filters:
            branches:
              ignore: /.*/
            # Testing tags are reserved for testing circle test + build steps
            tags:
              ignore: /^testing-.*/
